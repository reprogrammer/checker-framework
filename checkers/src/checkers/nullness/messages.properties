### Error messages for the Nullness Checker
dereference.of.nullable=dereference of possibly-null reference %s
iterating.over.nullable=iterating over possibly-null reference %s
unboxing.of.nullable=unboxing a possibly-null reference %s
throwing.nullable=throwing a possibly-null throwable %s
locking.nullable=synchronizing over a possibly-null lock %s
accessing.nullable=accessing a possibly-null array %s
known.nonnull=redundant check; "%s" is non-null
fields.uninitialized=constructor does not initialize fields %s
nonnullonentry.precondition.not.satisfied=precondition violated: @NonNullOnEntry("%s")
assertifxxx.only.on.boolean=return type of method with @AssertNonNullIfTrue(...) or @AssertNonNullIfFalse(...) annotation must have 
assertiftrue.only.on.boolean=@AssertNonNullIfTrue(...) annotation may only target method with boolean return type
assertiffalse.only.on.boolean=@AssertNonNullIfFalse(...) annotation may only target method with boolean return type
assertiftrue.postcondition.not.satisfied=postcondition violated: @AssertNonNullIfTrue("%s")
assertiffalse.postcondition.not.satisfied=postcondition violated: @AssertNonNullIfFalse("%s")
assert.postcondition.not.satisfied=postcondition violated: @AssertNonNullAfter("%s")
assertiftrue.nullness.condition.error=return statement in method with @AssertNonNullIfTrue annotation cannot use OR in condition
assertiffalse.nullness.condition.error=return statement in method with @AssertNonNullIfFalse annotation cannot use AND in condition
nonnull.hiding.violated=@NonNullOnEntry field "%s" is hidden
nonnull.nonstatic.with.class=Field "%s" is not static but uses a class name
nullness.parse.error=Could not parse annotation "%s"
class.not.found.nullness.parse.error=Class not found for field "%s"
field.not.found.nullness.parse.error=Field "%s" not found
param.index.nullness.parse.error=Invalid parameter index in "%s"
nullness.parse.error=Parsing of "%s" failed; I will assume it is correct