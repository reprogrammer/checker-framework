# HG changeset patch
# User notnoop
# Date 1267157990 18000
# Node ID 2dd0a58f15555ac18c11ced9005b3ff84fe73477
# Parent  48f8ae25e672f2afe4f343a9b9d09114959ddde4
applying jsr308 changes

diff --git a/src/japa/parser/JavaParser.java b/src/japa/parser/JavaParser.java
--- a/src/japa/parser/JavaParser.java
+++ b/src/japa/parser/JavaParser.java
@@ -22,6 +22,7 @@
 package japa.parser;
 
 import japa.parser.ast.CompilationUnit;
+import japa.parser.ast.IndexUnit;
 
 import java.io.File;
 import java.io.FileInputStream;
@@ -71,16 +72,16 @@
      * @return CompilationUnit representing the Java source code
      * @throws ParseException if the source code has parser errors
      */
-    public static CompilationUnit parse(InputStream in, String encoding) throws ParseException {
+    public static IndexUnit parse(InputStream in, String encoding) throws ParseException {
         if (cacheParser) {
             if (parser == null) {
                 parser = new ASTParser(in, encoding);
             } else {
                 parser.reset(in, encoding);
             }
-            return parser.CompilationUnit();
+            return parser.IndexUnit();
         }
-        return new ASTParser(in, encoding).CompilationUnit();
+        return new ASTParser(in, encoding).IndexUnit();
     }
 
     /**
@@ -90,7 +91,7 @@
      * @return CompilationUnit representing the Java source code
      * @throws ParseException if the source code has parser errors
      */
-    public static CompilationUnit parse(InputStream in) throws ParseException {
+    public static IndexUnit parse(InputStream in) throws ParseException {
         return parse(in, null);
     }
 
@@ -103,7 +104,7 @@
      * @throws ParseException if the source code has parser errors
      * @throws IOException 
      */
-    public static CompilationUnit parse(File file, String encoding) throws ParseException, IOException {
+    public static IndexUnit parse(File file, String encoding) throws ParseException, IOException {
         FileInputStream in = new FileInputStream(file);
         try {
             return parse(in, encoding);
@@ -120,7 +121,7 @@
      * @throws ParseException if the source code has parser errors
      * @throws IOException 
      */
-    public static CompilationUnit parse(File file) throws ParseException, IOException {
+    public static IndexUnit parse(File file) throws ParseException, IOException {
         return parse(file, null);
     }
 }
diff --git a/src/japa/parser/ast/IndexUnit.java b/src/japa/parser/ast/IndexUnit.java
new file mode 100644
--- /dev/null
+++ b/src/japa/parser/ast/IndexUnit.java
@@ -0,0 +1,32 @@
+package japa.parser.ast;
+
+import japa.parser.ast.visitor.GenericVisitor;
+import japa.parser.ast.visitor.VoidVisitor;
+
+import java.util.List;
+
+public class IndexUnit extends Node {
+    List<CompilationUnit> compilationUnits;
+
+    public IndexUnit(List<CompilationUnit> compilationUnits) {
+        this.compilationUnits = compilationUnits;
+    }
+
+    @Override
+    public <R, A> R accept(GenericVisitor<R, A> v, A arg) {
+        return v.visit(this, arg);
+    }
+
+    @Override
+    public <A> void accept(VoidVisitor<A> v, A arg) {
+        v.visit(this, arg);
+    }
+
+    public List<CompilationUnit> getCompilationUnits() {
+        return this.compilationUnits;
+    }
+
+    public void setCompilationUnit(List<CompilationUnit> compilationUnits) {
+        this.compilationUnits = compilationUnits;
+    }
+}
diff --git a/src/japa/parser/ast/body/ConstructorDeclaration.java b/src/japa/parser/ast/body/ConstructorDeclaration.java
--- a/src/japa/parser/ast/body/ConstructorDeclaration.java
+++ b/src/japa/parser/ast/body/ConstructorDeclaration.java
@@ -43,6 +43,8 @@
 
     private List<Parameter> parameters;
 
+    private List<AnnotationExpr> receiverAnnotations;
+
     private List<NameExpr> throws_;
 
     private BlockStmt block;
@@ -65,12 +67,13 @@
         this.block = block;
     }
 
-    public ConstructorDeclaration(int beginLine, int beginColumn, int endLine, int endColumn, JavadocComment javaDoc, int modifiers, List<AnnotationExpr> annotations, List<TypeParameter> typeParameters, String name, List<Parameter> parameters, List<NameExpr> throws_, BlockStmt block) {
+    public ConstructorDeclaration(int beginLine, int beginColumn, int endLine, int endColumn, JavadocComment javaDoc, int modifiers, List<AnnotationExpr> annotations, List<TypeParameter> typeParameters, String name, List<Parameter> parameters, List<AnnotationExpr> receiverAnnotations, List<NameExpr> throws_, BlockStmt block) {
         super(beginLine, beginColumn, endLine, endColumn, annotations, javaDoc);
         this.modifiers = modifiers;
         this.typeParameters = typeParameters;
         this.name = name;
         this.parameters = parameters;
+        this.receiverAnnotations = receiverAnnotations;
         this.throws_ = throws_;
         this.block = block;
     }
@@ -107,6 +110,10 @@
         return parameters;
     }
 
+    public List<AnnotationExpr> getReceiverAnnotations() {
+        return receiverAnnotations;
+    }
+
     public List<NameExpr> getThrows() {
         return throws_;
     }
@@ -131,6 +138,10 @@
         this.parameters = parameters;
     }
 
+    public void setReceiverAnnotations(List<AnnotationExpr> receiverAnnotations) {
+        this.receiverAnnotations = receiverAnnotations;
+    }
+
     public void setThrows(List<NameExpr> throws_) {
         this.throws_ = throws_;
     }
diff --git a/src/japa/parser/ast/body/MethodDeclaration.java b/src/japa/parser/ast/body/MethodDeclaration.java
--- a/src/japa/parser/ast/body/MethodDeclaration.java
+++ b/src/japa/parser/ast/body/MethodDeclaration.java
@@ -46,6 +46,8 @@
 
     private List<Parameter> parameters;
 
+    private List<AnnotationExpr> receiverAnnotations;
+
     private int arrayCount;
 
     private List<NameExpr> throws_;
@@ -80,7 +82,7 @@
         this.body = block;
     }
 
-    public MethodDeclaration(int beginLine, int beginColumn, int endLine, int endColumn, JavadocComment javaDoc, int modifiers, List<AnnotationExpr> annotations, List<TypeParameter> typeParameters, Type type, String name, List<Parameter> parameters, int arrayCount, List<NameExpr> throws_, BlockStmt block) {
+    public MethodDeclaration(int beginLine, int beginColumn, int endLine, int endColumn, JavadocComment javaDoc, int modifiers, List<AnnotationExpr> annotations, List<TypeParameter> typeParameters, Type type, String name, List<Parameter> parameters, int arrayCount, List<AnnotationExpr> receiverAnnotations, List<NameExpr> throws_, BlockStmt block) {
         super(beginLine, beginColumn, endLine, endColumn, annotations, javaDoc);
         this.modifiers = modifiers;
         this.typeParameters = typeParameters;
@@ -88,6 +90,7 @@
         this.name = name;
         this.parameters = parameters;
         this.arrayCount = arrayCount;
+        this.receiverAnnotations = receiverAnnotations;
         this.throws_ = throws_;
         this.body = block;
     }
@@ -128,6 +131,10 @@
         return parameters;
     }
 
+    public List<AnnotationExpr> getReceiverAnnotations() {
+        return receiverAnnotations;
+    }
+
     public List<NameExpr> getThrows() {
         return throws_;
     }
@@ -160,6 +167,10 @@
         this.parameters = parameters;
     }
 
+    public void setReceiverAnnotations(List<AnnotationExpr> receiverAnnotations) {
+        this.receiverAnnotations = receiverAnnotations;
+    }
+
     public void setThrows(List<NameExpr> throws_) {
         this.throws_ = throws_;
     }
diff --git a/src/japa/parser/ast/type/ReferenceType.java b/src/japa/parser/ast/type/ReferenceType.java
--- a/src/japa/parser/ast/type/ReferenceType.java
+++ b/src/japa/parser/ast/type/ReferenceType.java
@@ -21,6 +21,9 @@
  */
 package japa.parser.ast.type;
 
+import java.util.List;
+
+import japa.parser.ast.expr.AnnotationExpr;
 import japa.parser.ast.visitor.GenericVisitor;
 import japa.parser.ast.visitor.VoidVisitor;
 
@@ -33,6 +36,8 @@
 
     private int arrayCount;
 
+    private List<List<AnnotationExpr>> arrayAnnotations;
+
     public ReferenceType() {
     }
 
@@ -45,10 +50,12 @@
         this.arrayCount = arrayCount;
     }
 
-    public ReferenceType(int beginLine, int beginColumn, int endLine, int endColumn, Type type, int arrayCount) {
+    public ReferenceType(int beginLine, int beginColumn, int endLine, int endColumn, Type type, int arrayCount, List<List<AnnotationExpr>> arrayAnnotations) {
         super(beginLine, beginColumn, endLine, endColumn);
         this.type = type;
         this.arrayCount = arrayCount;
+        this.arrayAnnotations = arrayAnnotations;
+        assert arrayCount == arrayAnnotations.size();
     }
 
     @Override
@@ -65,6 +72,17 @@
         return arrayCount;
     }
 
+    public List<List<AnnotationExpr>> getArrayAnnotations() {
+        return arrayAnnotations;
+    }
+
+    public List<AnnotationExpr> getAnnotationsAtLevel(int level) {
+        if (level == -1)
+            return type.getAnnotations();
+        else
+            return arrayAnnotations.get(level);
+    }
+
     public Type getType() {
         return type;
     }
@@ -73,6 +91,10 @@
         this.arrayCount = arrayCount;
     }
 
+    public void setArrayAnnotations(List<List<AnnotationExpr>> arrayAnnotations) {
+        this.arrayAnnotations = arrayAnnotations;
+    }
+
     public void setType(Type type) {
         this.type = type;
     }
diff --git a/src/japa/parser/ast/type/Type.java b/src/japa/parser/ast/type/Type.java
--- a/src/japa/parser/ast/type/Type.java
+++ b/src/japa/parser/ast/type/Type.java
@@ -21,13 +21,18 @@
  */
 package japa.parser.ast.type;
 
+import java.util.List;
+
 import japa.parser.ast.Node;
+import japa.parser.ast.expr.AnnotationExpr;
 
 /**
  * @author Julio Vilmar Gesser
  */
 public abstract class Type extends Node {
 
+    private List<AnnotationExpr> annotations;
+
     public Type() {
     }
 
@@ -35,4 +40,12 @@
         super(beginLine, beginColumn, endLine, endColumn);
     }
 
+    public void setAnnotations(List<AnnotationExpr> annotations) {
+        this.annotations = annotations;
+    }
+
+    public List<AnnotationExpr> getAnnotations() {
+        return annotations;
+    }
+
 }
diff --git a/src/japa/parser/ast/visitor/DumpVisitor.java b/src/japa/parser/ast/visitor/DumpVisitor.java
--- a/src/japa/parser/ast/visitor/DumpVisitor.java
+++ b/src/japa/parser/ast/visitor/DumpVisitor.java
@@ -24,6 +24,7 @@
 import japa.parser.ast.BlockComment;
 import japa.parser.ast.CompilationUnit;
 import japa.parser.ast.ImportDeclaration;
+import japa.parser.ast.IndexUnit;
 import japa.parser.ast.LineComment;
 import japa.parser.ast.PackageDeclaration;
 import japa.parser.ast.TypeParameter;
@@ -283,6 +284,14 @@
         }
     }
 
+    public void visit(IndexUnit n, Object arg) {
+        for (CompilationUnit unit : n.getCompilationUnits()) {
+            visit(unit, arg);
+            printer.printLn();
+            printer.printLn();
+        }
+    }
+
     public void visit(CompilationUnit n, Object arg) {
         if (n.getPackage() != null) {
             n.getPackage().accept(this, arg);
@@ -336,7 +345,7 @@
 
     public void visit(ClassOrInterfaceDeclaration n, Object arg) {
         printJavadoc(n.getJavaDoc(), arg);
-        printMemberAnnotations(n.getAnnotations(), arg);
+        printAnnotations(n.getAnnotations(), arg);
         printModifiers(n.getModifiers());
 
         if (n.isInterface()) {
@@ -392,6 +401,7 @@
     }
 
     public void visit(ClassOrInterfaceType n, Object arg) {
+        printAnnotations(n.getAnnotations(), arg);
         if (n.getScope() != null) {
             n.getScope().accept(this, arg);
             printer.print(".");
@@ -415,6 +425,8 @@
     }
 
     public void visit(PrimitiveType n, Object arg) {
+        printAnnotations(n.getAnnotations(), arg);
+
         switch (n.getType()) {
             case Boolean:
                 printer.print("boolean");
@@ -444,13 +456,20 @@
     }
 
     public void visit(ReferenceType n, Object arg) {
+        printAnnotations(n.getAnnotations(), arg);
+
         n.getType().accept(this, arg);
         for (int i = 0; i < n.getArrayCount(); i++) {
+            if (!n.getAnnotationsAtLevel(i).isEmpty()) {
+                printer.print(" ");
+                printAnnotations(n.getAnnotationsAtLevel(i), arg);
+            }
             printer.print("[]");
         }
     }
 
     public void visit(WildcardType n, Object arg) {
+        printAnnotations(n.getAnnotations(), arg);
         printer.print("?");
         if (n.getExtends() != null) {
             printer.print(" extends ");
@@ -838,6 +857,9 @@
         }
         printer.print(")");
 
+        printer.print(" ");
+        printAnnotations(n.getReceiverAnnotations(), arg);
+
         if (n.getThrows() != null) {
             printer.print(" throws ");
             for (Iterator<NameExpr> i = n.getThrows().iterator(); i.hasNext();) {
@@ -847,8 +869,9 @@
                     printer.print(", ");
                 }
             }
+        printer.print(" ");
         }
-        printer.print(" ");
+
         n.getBlock().accept(this, arg);
     }
 
@@ -882,6 +905,9 @@
             printer.print("[]");
         }
 
+        printer.print(" ");
+        printAnnotations(n.getReceiverAnnotations(), arg);
+
         if (n.getThrows() != null) {
             printer.print(" throws ");
             for (Iterator<NameExpr> i = n.getThrows().iterator(); i.hasNext();) {
diff --git a/src/japa/parser/ast/visitor/GenericVisitor.java b/src/japa/parser/ast/visitor/GenericVisitor.java
--- a/src/japa/parser/ast/visitor/GenericVisitor.java
+++ b/src/japa/parser/ast/visitor/GenericVisitor.java
@@ -24,6 +24,7 @@
 import japa.parser.ast.BlockComment;
 import japa.parser.ast.CompilationUnit;
 import japa.parser.ast.ImportDeclaration;
+import japa.parser.ast.IndexUnit;
 import japa.parser.ast.LineComment;
 import japa.parser.ast.PackageDeclaration;
 import japa.parser.ast.TypeParameter;
@@ -108,6 +109,8 @@
 
     //- Compilation Unit ----------------------------------
 
+    public R visit(IndexUnit n, A arg);
+
     public R visit(CompilationUnit n, A arg);
 
     public R visit(PackageDeclaration n, A arg);
diff --git a/src/japa/parser/ast/visitor/GenericVisitorAdapter.java b/src/japa/parser/ast/visitor/GenericVisitorAdapter.java
--- a/src/japa/parser/ast/visitor/GenericVisitorAdapter.java
+++ b/src/japa/parser/ast/visitor/GenericVisitorAdapter.java
@@ -24,6 +24,7 @@
 import japa.parser.ast.BlockComment;
 import japa.parser.ast.CompilationUnit;
 import japa.parser.ast.ImportDeclaration;
+import japa.parser.ast.IndexUnit;
 import japa.parser.ast.LineComment;
 import japa.parser.ast.PackageDeclaration;
 import japa.parser.ast.TypeParameter;
@@ -814,6 +815,13 @@
         return null;
     }
 
+    @Override
+    public R visit(IndexUnit n, A arg) {
+        for (CompilationUnit unit : n.getCompilationUnits())
+            unit.accept(this, arg);
+        return null;
+    }
+
     public R visit(BlockComment n, A arg) {
         return null;
     }
diff --git a/src/japa/parser/ast/visitor/VoidVisitor.java b/src/japa/parser/ast/visitor/VoidVisitor.java
--- a/src/japa/parser/ast/visitor/VoidVisitor.java
+++ b/src/japa/parser/ast/visitor/VoidVisitor.java
@@ -24,6 +24,7 @@
 import japa.parser.ast.BlockComment;
 import japa.parser.ast.CompilationUnit;
 import japa.parser.ast.ImportDeclaration;
+import japa.parser.ast.IndexUnit;
 import japa.parser.ast.LineComment;
 import japa.parser.ast.PackageDeclaration;
 import japa.parser.ast.TypeParameter;
@@ -108,6 +109,8 @@
 
     //- Compilation Unit ----------------------------------
 
+    public void visit(IndexUnit n, A arg);
+
     public void visit(CompilationUnit n, A arg);
 
     public void visit(PackageDeclaration n, A arg);
diff --git a/src/japa/parser/ast/visitor/VoidVisitorAdapter.java b/src/japa/parser/ast/visitor/VoidVisitorAdapter.java
--- a/src/japa/parser/ast/visitor/VoidVisitorAdapter.java
+++ b/src/japa/parser/ast/visitor/VoidVisitorAdapter.java
@@ -24,6 +24,7 @@
 import japa.parser.ast.BlockComment;
 import japa.parser.ast.CompilationUnit;
 import japa.parser.ast.ImportDeclaration;
+import japa.parser.ast.IndexUnit;
 import japa.parser.ast.LineComment;
 import japa.parser.ast.PackageDeclaration;
 import japa.parser.ast.TypeParameter;
@@ -740,4 +741,10 @@
             n.getSuper().accept(this, arg);
         }
     }
+
+    @Override
+    public void visit(IndexUnit n, A arg) {
+        for (CompilationUnit unit : n.getCompilationUnits())
+            unit.accept(this, arg);
+    }
 }
diff --git a/src/japa/parser/java_1_5.jj b/src/japa/parser/java_1_5.jj
--- a/src/japa/parser/java_1_5.jj
+++ b/src/japa/parser/java_1_5.jj
@@ -1160,6 +1160,41 @@
  * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
  *****************************************/
 
+IndexUnit IndexUnit():
+{
+        /* Actual Type */
+        List compilationUnits = new LinkedList();
+        CompilationUnit cu;
+
+        /* Parsing the compilation unit itself */
+	PackageDeclaration pakage = null;
+	List imports = null;
+	ImportDeclaration in = null;
+	List types = null;
+	TypeDeclaration tn = null;
+	int line = -1;
+	int column = 0;
+}
+{
+  [ LOOKAHEAD(PackageDeclaration()) pakage = PackageDeclaration() {line = pakage.getBeginLine(); column = pakage.getBeginColumn();} ]
+  ( in = ImportDeclaration() { if(line==-1){line = in.getBeginLine(); column = in.getBeginColumn();} imports = add(imports, in); } )*
+  ( tn = TypeDeclaration() { if(line==-1){line = tn.getBeginLine(); column = tn.getBeginColumn();} types = add(types, tn); } )*
+  { cu = new CompilationUnit(line == -1 ? 0 : line, column, token.endLine, token.endColumn,pakage, imports, types, getComments());
+    compilationUnits.add(cu); }
+
+/** parse more types **/
+(
+  pakage = PackageDeclaration() {line = pakage.getBeginLine(); column = pakage.getBeginColumn(); imports = new LinkedList(); types = new LinkedList(); }
+  ( in = ImportDeclaration() { if(line==-1){line = in.getBeginLine(); column = in.getBeginColumn();} imports = add(imports, in); } )*
+  ( tn = TypeDeclaration() { if(line==-1){line = tn.getBeginLine(); column = tn.getBeginColumn();} types = add(types, tn); } )*
+  { cu = new CompilationUnit(line == -1 ? 0 : line, column, token.endLine, token.endColumn,pakage, imports, types, getComments());
+    compilationUnits.add(cu); }  
+)*
+    (<EOF> | "\u001A" /** ctrl+z char **/)
+  { return new IndexUnit(compilationUnits); }
+}
+
+
 /*
  * Program structuring syntax follows.
  */
@@ -1191,7 +1226,7 @@
 	int column;
 }
 {
-( ann = Annotation() { annotations = add(annotations, ann); } )*
+/*( ann = Annotation() { annotations = add(annotations, ann); } )* */
   "package" {line=token.beginLine; column=token.beginColumn;}  name = Name() ";"
   { return new PackageDeclaration(line, column, token.endLine, token.endColumn,annotations, name); }
 }
@@ -1459,7 +1494,7 @@
 	      LOOKAHEAD( [ TypeParameters() ] <IDENTIFIER> "(" )
 	      ret = ConstructorDeclaration(modifier)
 	    |
-	      LOOKAHEAD( Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
+	      LOOKAHEAD( UnType() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) )
 	      ret = FieldDeclaration(modifier)
 	    |
 	      ret = MethodDeclaration(modifier)
@@ -1478,7 +1513,7 @@
 }
 {
   // Modifiers are already matched in the caller
-  type = Type()
+  type = UnType()
         val = VariableDeclarator() { variables.add(val); }
   ( "," val = VariableDeclarator() { variables.add(val); } )* ";"
 
@@ -1486,7 +1521,8 @@
   	int line = modifier.beginLine;
   	int column = modifier.beginColumn;
   	if (line == -1) { line=type.getBeginLine(); column=type.getBeginColumn(); }
-  	return new FieldDeclaration(line, column, token.endLine, token.endColumn, popJavadoc(), modifier.modifiers, modifier.annotations, type, variables); 
+        type.setAnnotations(modifier.annotations);
+  	return new FieldDeclaration(line, column, token.endLine, token.endColumn, popJavadoc(), modifier.modifiers, null, type, variables); 
   }
 }
 
@@ -1544,6 +1580,7 @@
 	String name;
 	List parameters;
 	int arrayCount = 0;
+        List receiverAnnotations = null;
 	List throws_ = null;
 	BlockStmt block = null;
 	int line = modifier.beginLine;
@@ -1552,12 +1589,14 @@
 {
   // Modifiers already matched in the caller!
   [ typeParameters = TypeParameters() { int[] lineCol=(int[])typeParameters.remove(0); if(line==-1){ line=lineCol[0]; column=lineCol[1];} } ]
-  type = ResultType() { if(line==-1){line=type.getBeginLine(); column=type.getBeginColumn();}}
+  type = UnResultType() { if(line==-1){line=type.getBeginLine(); column=type.getBeginColumn();}}
   <IDENTIFIER> { name = token.image; } parameters = FormalParameters() ( "[" "]" { arrayCount++; } )*
+  receiverAnnotations = Annotationsopt()
   [ "throws" throws_ = NameList() ]
   ( block = Block() | ";" )
 
-  { return new MethodDeclaration(line, column, token.endLine, token.endColumn,popJavadoc(), modifier.modifiers, modifier.annotations, typeParameters, type, name, parameters, arrayCount, throws_, block); }
+  { type.setAnnotations(modifier.annotations);
+return new MethodDeclaration(line, column, token.endLine, token.endColumn,popJavadoc(), modifier.modifiers, null, typeParameters, type, name, parameters, arrayCount, receiverAnnotations, throws_, block); }
 }
 
 List FormalParameters():
@@ -1576,16 +1615,18 @@
 	Modifier modifier;
 	Type type;
 	boolean isVarArg = false;
+	List varArgAnnotations = null;
 	VariableDeclaratorId id;
 }
 {
-  modifier = Modifiers() type = Type() [ "..." { isVarArg = true;} ] id = VariableDeclaratorId()
+  modifier = Modifiers() type = UnType() [ LOOKAHEAD( Annotationsopt() "..." ) varArgAnnotations = Annotationsopt() "..." { isVarArg = true;} ] id = VariableDeclaratorId()
 
   {
     int line = modifier.beginLine;
     int column = modifier.beginColumn;
     if(line==-1){ line=type.getBeginLine(); column=type.getBeginColumn(); }
-    return new Parameter(line, column, token.endLine, token.endColumn, modifier.modifiers, modifier.annotations, type, isVarArg, id);
+    type.setAnnotations(modifier.annotations);
+    return new Parameter(line, column, token.endLine, token.endColumn, modifier.modifiers, null, type, isVarArg, id);
   }
 }
 
@@ -1594,9 +1635,10 @@
 	List typeParameters = null;
 	String name;
 	List parameters;
+        List receiverAnnotations;
 	List throws_ = null;
 	ExplicitConstructorInvocationStmt exConsInv = null;
-	List stmts;
+	List stmts = null;
 	int line = modifier.beginLine;
 	int column = modifier.beginColumn;
 	int bbLine = 0;
@@ -1607,17 +1649,19 @@
 {
   [ typeParameters = TypeParameters() { int[] lineCol=(int[])typeParameters.remove(0); if(line==-1){ line=lineCol[0]; column=lineCol[1];} } ]
   // Modifiers matched in the caller
-  <IDENTIFIER> { name = token.image; if(line==-1){line=token.beginLine; column=token.beginColumn;}} parameters = FormalParameters() [ "throws" throws_ = NameList() ]
-  "{" { bbLine=token.beginLine; bbColumn=token.beginColumn; }
+  <IDENTIFIER> { name = token.image; if(line==-1){line=token.beginLine; column=token.beginColumn;}} parameters = FormalParameters() 
+  receiverAnnotations = Annotationsopt()
+[ "throws" throws_ = NameList() ]
+(  "{" { bbLine=token.beginLine; bbColumn=token.beginColumn; }
     [ LOOKAHEAD(ExplicitConstructorInvocation()) exConsInv = ExplicitConstructorInvocation() ]
     stmts = Statements()
-  "}"
+  "}" | ";" )
 
   {
   	if (exConsInv != null) {
   		stmts = add(0, stmts, exConsInv);
   	}
-  	return new ConstructorDeclaration(line, column, token.endLine, token.endColumn,popJavadoc(), modifier.modifiers, modifier.annotations, typeParameters, name, parameters, throws_, new BlockStmt(bbLine, bbColumn, token.endLine, token.endColumn, stmts));
+  	return new ConstructorDeclaration(line, column, token.endLine, token.endColumn,popJavadoc(), modifier.modifiers, modifier.annotations, typeParameters, name, parameters, receiverAnnotations, throws_, new BlockStmt(bbLine, bbColumn, token.endLine, token.endColumn, stmts));
   }
 }
 
@@ -1693,17 +1737,165 @@
 {
 	Type type;
 	int arrayCount = 0;
+        List annotations;
+        List arrayAnnotations = new LinkedList();
+        List levelAnn;
+}
+{
+  annotations = Annotationsopt()
+  (
+   type = UnPrimitiveType() ( LOOKAHEAD( Annotationsopt() "[" ) levelAnn = Annotationsopt() "[" "]" { arrayCount++; arrayAnnotations.add(levelAnn); } )+
+  |
+   type = UnClassOrInterfaceType() ( LOOKAHEAD( Annotationsopt() "[" ) levelAnn = Annotationsopt() "[" "]" { arrayCount++; arrayAnnotations.add(levelAnn); } )*
+  )
+  { ReferenceType ret = new ReferenceType(type.getBeginLine(), type.getBeginColumn(), token.endLine, token.endColumn, type, arrayCount, arrayAnnotations);
+    ret.setAnnotations(annotations);
+    return ret; }
+}
+
+ClassOrInterfaceType ClassOrInterfaceType():
+{
+	ClassOrInterfaceType ret;
+	String name;
+	List typeArgs = null;
+	int line;
+	int column;
+        List annotations;
+}
+{
+  annotations = Annotationsopt()
+  <IDENTIFIER> {line=token.beginLine; column=token.beginColumn;} { name = token.image; }
+  [ LOOKAHEAD(2) typeArgs = TypeArguments() {typeArgs.remove(0);} ]
+  { ret = new ClassOrInterfaceType(line, column, token.endLine, token.endColumn,null, name, typeArgs); }
+  (
+	  LOOKAHEAD(2) "." <IDENTIFIER> { name = token.image; }
+	  [ LOOKAHEAD(2) typeArgs = TypeArguments() {typeArgs.remove(0);} ] { ret = new ClassOrInterfaceType(line, column, token.endLine, token.endColumn,ret, name, typeArgs); }
+  )*
+  { ret.setAnnotations(annotations); return ret; }
+}
+
+List TypeArguments():
+{
+	List ret = new LinkedList();
+	Type type;
+}
+{
+   "<" { ret.add(new int[]{token.beginLine, token.beginColumn}); }
+   type = TypeArgument() { ret.add(type); } ( "," type = TypeArgument() { ret.add(type); } )*
+   ">"
+   { return ret; }
+}
+
+Type TypeArgument():
+{
+	Type ret;
+        List annotations = new LinkedList();
+}
+{
+ annotations = Annotationsopt()
+ (
+   ret = UnReferenceType()
+ |
+   ret = UnWildcard()
+ )
+ { ret.setAnnotations(annotations); return ret; }
+}
+
+WildcardType Wildcard():
+{
+	ReferenceType ext = null;
+	ReferenceType sup = null;
+	int line;
+	int column;
+        List annotations;
+}
+{
+   annotations = Annotationsopt()
+   "?" {line=token.beginLine; column=token.beginColumn;}
+   [
+		"extends" ext = ReferenceType()
+	|
+		"super" sup = ReferenceType()
+   ]
+   { WildcardType ret = new WildcardType(line, column, token.endLine, token.endColumn,ext, sup);
+     ret.setAnnotations(annotations);
+     return ret; }
+}
+
+PrimitiveType PrimitiveType():
+{
+	PrimitiveType ret;
+        List annotations;
+}
+{
+  annotations = Annotationsopt()
+(
+  "boolean" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Boolean); }
+|
+  "char" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Char); }
+|
+  "byte" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Byte); }
+|
+  "short" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Short); }
+|
+  "int" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Int); }
+|
+  "long" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Long); }
+|
+  "float" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Float); }
+|
+  "double" { ret = new PrimitiveType(token.beginLine, token.beginColumn, token.endLine, token.endColumn, PrimitiveType.Primitive.Double); }
+)
+{ ret.setAnnotations(annotations); return ret; }
+}
+
+Type ResultType():
+{
+	Type ret;
 }
 {
   (
-   type = PrimitiveType() ( LOOKAHEAD(2) "[" "]" { arrayCount++; } )+
-  |
-   type = ClassOrInterfaceType() ( LOOKAHEAD(2) "[" "]" { arrayCount++; } )*
+	  "void" { ret = new VoidType(token.beginLine, token.beginColumn, token.endLine, token.endColumn); }
+	|
+	  ret = Type()
   )
-  { return new ReferenceType(type.getBeginLine(), type.getBeginColumn(), token.endLine, token.endColumn, type, arrayCount); }
+  { return ret; }
 }
 
-ClassOrInterfaceType ClassOrInterfaceType():
+/*
+ * Unannotated Type, name and expression syntax follows.
+ */
+
+Type UnType():
+{
+	Type ret;
+}
+{
+ (
+   LOOKAHEAD(2) ret = UnReferenceType()
+ |
+   ret = UnPrimitiveType()
+ )
+ { return ret; }
+}
+
+ReferenceType UnReferenceType():
+{
+	Type type;
+	int arrayCount = 0;
+        List arrayAnnotations = new LinkedList();
+        List levelAnn;
+}
+{
+  (
+   type = UnPrimitiveType() ( LOOKAHEAD( Annotationsopt() "[" ) levelAnn = Annotationsopt() "[" "]" { arrayCount++; arrayAnnotations.add(levelAnn); } )+
+  |
+   type = UnClassOrInterfaceType() ( LOOKAHEAD( Annotationsopt() "[" ) levelAnn = Annotationsopt() "[" "]" { arrayCount++; arrayAnnotations.add(levelAnn); } )*
+  )
+  { return new ReferenceType(type.getBeginLine(), type.getBeginColumn(), token.endLine, token.endColumn, type, arrayCount, arrayAnnotations); }
+}
+
+ClassOrInterfaceType UnClassOrInterfaceType():
 {
 	ClassOrInterfaceType ret;
 	String name;
@@ -1722,49 +1914,7 @@
   { return ret; }
 }
 
-List TypeArguments():
-{
-	List ret = new LinkedList();
-	Type type;
-}
-{
-   "<" { ret.add(new int[]{token.beginLine, token.beginColumn}); }
-   type = TypeArgument() { ret.add(type); } ( "," type = TypeArgument() { ret.add(type); } )*
-   ">"
-   { return ret; }
-}
-
-Type TypeArgument():
-{
-	Type ret;
-}
-{
- (
-   ret = ReferenceType()
- |
-   ret = Wildcard()
- )
- { return ret; }
-}
-
-WildcardType Wildcard():
-{
-	ReferenceType ext = null;
-	ReferenceType sup = null;
-	int line;
-	int column;
-}
-{
-   "?" {line=token.beginLine; column=token.beginColumn;}
-   [
-		"extends" ext = ReferenceType()
-	|
-		"super" sup = ReferenceType()
-   ]
-   { return new WildcardType(line, column, token.endLine, token.endColumn,ext, sup); }
-}
-
-PrimitiveType PrimitiveType():
+PrimitiveType UnPrimitiveType():
 {
 	PrimitiveType ret;
 }
@@ -1789,7 +1939,24 @@
 { return ret; }
 }
 
-Type ResultType():
+WildcardType UnWildcard():
+{
+	ReferenceType ext = null;
+	ReferenceType sup = null;
+	int line;
+	int column;
+}
+{
+   "?" {line=token.beginLine; column=token.beginColumn;}
+   [
+		"extends" ext = ReferenceType()
+	|
+		"super" sup = ReferenceType()
+   ]
+   { return new WildcardType(line, column, token.endLine, token.endColumn,ext, sup); }
+}
+
+Type UnResultType():
 {
 	Type ret;
 }
@@ -1797,7 +1964,7 @@
   (
 	  "void" { ret = new VoidType(token.beginLine, token.beginColumn, token.endLine, token.endColumn); }
 	|
-	  ret = Type()
+	  ret = UnType()
   )
   { return ret; }
 }
@@ -2198,8 +2365,8 @@
 	|
 	  ret = AllocationExpression(null)
 	|
-	  LOOKAHEAD( ResultType() "." "class" )
-	  type = ResultType() "." "class" { ret = new ClassExpr(type.getBeginLine(), type.getBeginColumn(), token.endLine, token.endColumn, type); }
+	  LOOKAHEAD( UnResultType() "." "class" )
+	  type = UnResultType() "." "class" { ret = new ClassExpr(type.getBeginLine(), type.getBeginColumn(), token.endLine, token.endColumn, type); }
 	|
 	  	<IDENTIFIER> { name = token.image; line=token.beginLine; column=token.beginColumn; }
 	  	[ args = Arguments() {hasArgs=true;} ]
@@ -2345,8 +2512,7 @@
 {
   "new" { if(scope==null) {line=token.beginLine; column=token.beginColumn;} else {line=scope.getBeginLine(); column=scope.getBeginColumn();} }
   (
-	  type = PrimitiveType()
-	  arr = ArrayDimsAndInits()
+	  type = UnPrimitiveType() arr = ArrayDimsAndInits()
 	  {
 	  	if (arr[0] instanceof Integer) {
 		  	ret = new ArrayCreationExpr(line, column, token.endLine, token.endColumn, type, ((Integer)arr[0]).intValue(), (ArrayInitializerExpr)arr[1]);
@@ -2355,8 +2521,9 @@
 	  	}
 	  }
 	|
-  	  LOOKAHEAD(ClassOrInterfaceType() ArrayDimsAndInits())
-	  type = ClassOrInterfaceType()
+	  [ typeArgs = TypeArguments() {typeArgs.remove(0);} ]
+	  type = UnClassOrInterfaceType()
+	  (
       arr = ArrayDimsAndInits()
 	  {
 	  	if (arr[0] instanceof Integer) {
@@ -2366,11 +2533,10 @@
 	  	}
 	  }
     |
-  	  [ typeArgs = TypeArguments() {typeArgs.remove(0);} ]
-  	  type = ClassOrInterfaceType()
       args = Arguments() [ LOOKAHEAD(2) anonymousBody = ClassOrInterfaceBody(false) ]
       { ret = new ObjectCreationExpr(line, column, token.endLine, token.endColumn, scope, (ClassOrInterfaceType) type, typeArgs, args, anonymousBody); }
   )
+  )
   { return ret; }
 }
 
@@ -2513,12 +2679,13 @@
 	VariableDeclarator var;
 }
 {
-  modifier = Modifiers() type = Type() var = VariableDeclarator() { vars.add(var); } ( "," var = VariableDeclarator() { vars.add(var); } )*
+  modifier = Modifiers() type = UnType() var = VariableDeclarator() { vars.add(var); } ( "," var = VariableDeclarator() { vars.add(var); } )*
   {
     int line = modifier.beginLine;
     int column = modifier.beginColumn;
     if(line==-1) {line=type.getBeginLine(); column=type.getBeginColumn(); }
-    return new VariableDeclarationExpr(line, column, token.endLine, token.endColumn, modifier.modifiers, modifier.annotations, type, vars);
+    type.setAnnotations(modifier.annotations);
+    return new VariableDeclarationExpr(line, column, token.endLine, token.endColumn, modifier.modifiers, null, type, vars);
   }
 }
 
@@ -2673,7 +2840,7 @@
 }
 {
   (
-	  LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
+	  LOOKAHEAD( Modifiers() UnType() <IDENTIFIER> )
 	  expr = VariableDeclarationExpression() { ret = new LinkedList(); ret.add(expr); }
 	|
 	  ret = ExpressionList()
@@ -2815,6 +2982,18 @@
 
 /* Annotation syntax follows. */
 
+List Annotationsopt():
+{
+        List annotations = new LinkedList();
+        AnnotationExpr ann;
+}
+{
+  (
+       (ann = Annotation() { annotations.add(ann); })*
+  )
+  { return annotations; }
+}
+
 AnnotationExpr Annotation():
 {
 	AnnotationExpr ret;
