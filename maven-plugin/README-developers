Checker Framework Maven plugin developer manual

This document is intended for people who want to use a custom version of
the Checker Framework together with Maven, or who wish to work on the Maven
plugin itself.  If you just wish to use the Checker Framework Maven plugin
then you should follow the directions in the Checker Framework manual (see
http://types.cs.washington.edu/checker-framework/current/checkers-manual.html#maven-plugin).

Ordinarily, the Maven plugin loads artifacts such as the Checker Framework
from the repository http://types.cs.washington.edu/m2-repo .

You may wish to load your own version of the artifacts.  One reason is that
you have your own modified version of the Checker Framework that adds a new
type-checker or fixes a bug.  Another reason is that you have modified the
Maven plugin itself.  [What tasks are necessary in each case?]



Installing the Maven plugin locally
===================================

The following simple commands allow you to build the
plugin, install it locally, and install it to a repository.

To build the plugin:

mvn clean package

To install the plugin when you have built locally:

mvn install

Any locally-installed version takes precedence over a download from the
Checker Framework Maven repository with the same version number.

At times, you may wish to push a version of the plugin to a repository
other than the Checker Framework respository.  This is useful to either
share a development version of the plugin or for testing purposes.  To
deploy a file to the location //<your path>/maven/m2-repo, use the
following command:

    mvn deploy:deploy-file \
    -DartifactId=checkersplugin \
    -Dfile=$CHECKERS/../maven-plugin/target/checkers-maven-plugin-<latest-version>.jar \
    -Dversion=<latest-version> \
    -Durl=file://<your path>/maven/m2-repo \
    -DgroupId=types.checkers \
    -Dpackaging=jar \
    -DpomFile=$CHECKERS/../maven-plugin/pom.xml \
    -DgeneratePom=false 

Note that the url property must start with a protocol such as "file://".



Dependencies
============

The plugin depends on 5 Maven artifacts.  If the artifacts aren't present
when executing Maven, then the plugin will attempt to download them.

Remember that a Maven artifact is uniquely identified by its group id,
artifact name, and version.

The artifacts have a shared group identifier of "types.checkers".

The artifact names are:
  checkers-maven-plugin - the Checker Framework maven plugin itself
  checkers-quals - checker-quals.jar
  compiler - jsr308-langtools compiler's javac.jar
  framework - checkers.jar
  jdk7 - jdk7.jar

The version number is specified by the checkersVersion element in your
pom.xml or, if the checkersVersion element is missing, is the version of
your Maven plugin.  See
http://types.cs.washington.edu/checker-framework/current/checkers-manual.html#maven-plugin.



Using a custom artifact, such as checkers.jar
=============================================

[Does this require me to have installed the Maven plugin locally, or not?]

You may wish to test a modified version of checkers.jar or another artifact
with the Checker Framework Maven plugin.  To do so, you will install the
artifacts with a new version number.  Follow these instructions:

1.  Increment the version number in $CHECKERS/../maven-plugin/pom.xml and
in the poms found in $CHECKERS/binary/poms.  Make sure that the new version
numbers all agree.

2.  Run:
  sh $CHECKERS/binary/poms/localInstall.sh
This command installs all of the jars in $CHECKERS/binary as artifacts in
your local repository using the version number found in the corresponding
pom file in $CHECKERS/binary/poms .

3.  For the project on which you are testing the Checker Framework:
a.  make sure the version number in the Checker Framework plugin section of
    your pom matches the one created in step 1,
b.  make sure the element "checkersVersion" matches the version created in
    step 1.
[How are parts a and b different?]
[Do I need to update the "repositories" section of the pom.xml file in the
application being built?]

You can now run mvn checkers:check on the project you wish to check and it
will use your custom version of the Maven plugin or any custom version of
the dependencies that you have installed.



Notes
=====

The version numbers of the various pom files are automatically updated by
the Checker Framework release scripts.

If you are using Maven 3, then adding -U to any command will force Maven to
overwrite any existing dependencies with newly downloaded dependencies.
This can be useful when debugging a deployed plugin for which you don't
want to increase its version number.
